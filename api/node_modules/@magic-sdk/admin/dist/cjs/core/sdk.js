"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MagicAdminSDK = void 0;
const sdk_exceptions_1 = require("./sdk-exceptions");
const token_1 = require("../modules/token");
const users_1 = require("../modules/users");
const utils_1 = require("../modules/utils");
const rest_1 = require("../utils/rest");
class MagicAdminSDK {
    /**
     * Deprecated. Use `init` instead.
     * @param secretApiKey
     * @param options
     */
    constructor(secretApiKey, options) {
        var _a, _b;
        this.secretApiKey = secretApiKey;
        const endpoint = (_a = options === null || options === void 0 ? void 0 : options.endpoint) !== null && _a !== void 0 ? _a : 'https://api.magic.link';
        this.apiBaseUrl = endpoint.replace(/\/+$/, '');
        this.clientId = (_b = options === null || options === void 0 ? void 0 : options.clientId) !== null && _b !== void 0 ? _b : null;
        // Assign API Modules
        this.token = new token_1.TokenModule(this);
        this.users = new users_1.UsersModule(this);
        this.utils = new utils_1.UtilsModule(this);
    }
    static init(secretApiKey, options) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            if (!secretApiKey)
                throw (0, sdk_exceptions_1.createApiKeyMissingError)();
            let hydratedOptions = options !== null && options !== void 0 ? options : {};
            const endpoint = (_a = hydratedOptions.endpoint) !== null && _a !== void 0 ? _a : 'https://api.magic.link';
            const apiBaseUrl = endpoint.replace(/\/+$/, '');
            if (!hydratedOptions.clientId) {
                const resp = yield (0, rest_1.get)(`${apiBaseUrl}/v1/admin/client/get`, secretApiKey);
                hydratedOptions = Object.assign(Object.assign({}, hydratedOptions), { clientId: resp.client_id });
            }
            return new MagicAdminSDK(secretApiKey, hydratedOptions);
        });
    }
}
exports.MagicAdminSDK = MagicAdminSDK;
//# sourceMappingURL=sdk.js.map