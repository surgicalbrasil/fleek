"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAudienceMismatchError = exports.createExpectedBearerStringError = exports.createServiceError = exports.createMalformedTokenError = exports.createApiKeyMissingError = exports.createFailedRecoveringProofError = exports.createIncorrectSignerAddressError = exports.createTokenCannotBeUsedYetError = exports.createTokenExpiredError = exports.MagicAdminSDKError = void 0;
const types_1 = require("../types");
// --- Base SDK error class
class MagicAdminSDKError extends Error {
    constructor(code, message, data = []) {
        super(`Magic Admin SDK Error: [${code}] ${message}`);
        this.code = code;
        this.data = data;
        this.__proto__ = Error;
        Object.setPrototypeOf(this, MagicAdminSDKError.prototype);
    }
}
exports.MagicAdminSDKError = MagicAdminSDKError;
// --- SDK error factories
function createTokenExpiredError() {
    return new MagicAdminSDKError(types_1.ErrorCode.TokenExpired, 'DID Token has expired. Request failed authentication.');
}
exports.createTokenExpiredError = createTokenExpiredError;
function createTokenCannotBeUsedYetError() {
    return new MagicAdminSDKError(types_1.ErrorCode.TokenCannotBeUsedYet, 'Given DID Token cannot be used at this time. Please check the `nbf` field and regenerate a new token with a suitable value.');
}
exports.createTokenCannotBeUsedYetError = createTokenCannotBeUsedYetError;
function createIncorrectSignerAddressError() {
    return new MagicAdminSDKError(types_1.ErrorCode.IncorrectSignerAddress, 'Incorrect signer address for DID Token. Request failed authentication.');
}
exports.createIncorrectSignerAddressError = createIncorrectSignerAddressError;
function createFailedRecoveringProofError() {
    return new MagicAdminSDKError(types_1.ErrorCode.FailedRecoveryProof, 'Failed to recover proof. Request failed authentication.');
}
exports.createFailedRecoveringProofError = createFailedRecoveringProofError;
function createApiKeyMissingError() {
    return new MagicAdminSDKError(types_1.ErrorCode.ApiKeyMissing, 'Please provide a secret Magic API key that you acquired from the developer dashboard.');
}
exports.createApiKeyMissingError = createApiKeyMissingError;
function createMalformedTokenError() {
    return new MagicAdminSDKError(types_1.ErrorCode.MalformedTokenError, 'The DID token is malformed or failed to parse.');
}
exports.createMalformedTokenError = createMalformedTokenError;
function createServiceError(...nestedErrors) {
    return new MagicAdminSDKError(types_1.ErrorCode.ServiceError, 'A service error occurred while communicating with the Magic API. Check the `data` key of this error object to see nested errors with additional context.', nestedErrors);
}
exports.createServiceError = createServiceError;
function createExpectedBearerStringError() {
    return new MagicAdminSDKError(types_1.ErrorCode.ExpectedBearerString, 'Expected argument to be a string in the `Bearer {token}` format.');
}
exports.createExpectedBearerStringError = createExpectedBearerStringError;
function createAudienceMismatchError() {
    return new MagicAdminSDKError(types_1.ErrorCode.AudienceMismatch, 'Audience does not match client ID. Please ensure your secret key matches the application which generated the DID token.');
}
exports.createAudienceMismatchError = createAudienceMismatchError;
//# sourceMappingURL=sdk-exceptions.js.map