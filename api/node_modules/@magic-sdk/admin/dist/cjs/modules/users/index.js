"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsersModule = void 0;
const base_module_1 = require("../base-module");
const sdk_exceptions_1 = require("../../core/sdk-exceptions");
const rest_1 = require("../../utils/rest");
const issuer_1 = require("../../utils/issuer");
const types_1 = require("../../types");
class UsersModule extends base_module_1.BaseModule {
    // --- User logout endpoints
    logoutByIssuer(issuer) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.sdk.secretApiKey)
                throw (0, sdk_exceptions_1.createApiKeyMissingError)();
            const body = { issuer };
            yield (0, rest_1.post)(`${this.sdk.apiBaseUrl}/v2/admin/auth/user/logout`, this.sdk.secretApiKey, body);
        });
    }
    logoutByPublicAddress(publicAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            const issuer = (0, issuer_1.generateIssuerFromPublicAddress)(publicAddress);
            yield this.logoutByIssuer(issuer);
        });
    }
    logoutByToken(DIDToken) {
        return __awaiter(this, void 0, void 0, function* () {
            const issuer = this.sdk.token.getIssuer(DIDToken);
            yield this.logoutByIssuer(issuer);
        });
    }
    // --- User metadata endpoints
    getMetadataByIssuer(issuer) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getMetadataByIssuerAndWallet(issuer, types_1.WalletType.NONE);
        });
    }
    getMetadataByToken(DIDToken) {
        return __awaiter(this, void 0, void 0, function* () {
            const issuer = this.sdk.token.getIssuer(DIDToken);
            return this.getMetadataByIssuer(issuer);
        });
    }
    getMetadataByPublicAddress(publicAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            const issuer = (0, issuer_1.generateIssuerFromPublicAddress)(publicAddress);
            return this.getMetadataByIssuer(issuer);
        });
    }
    getMetadataByTokenAndWallet(DIDToken, walletType) {
        return __awaiter(this, void 0, void 0, function* () {
            const issuer = this.sdk.token.getIssuer(DIDToken);
            return this.getMetadataByIssuerAndWallet(issuer, walletType);
        });
    }
    getMetadataByPublicAddressAndWallet(publicAddress, walletType) {
        return __awaiter(this, void 0, void 0, function* () {
            const issuer = (0, issuer_1.generateIssuerFromPublicAddress)(publicAddress);
            return this.getMetadataByIssuerAndWallet(issuer, walletType);
        });
    }
    getMetadataByIssuerAndWallet(issuer, walletType) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d, _e, _f, _g;
            if (!this.sdk.secretApiKey)
                throw (0, sdk_exceptions_1.createApiKeyMissingError)();
            const data = yield (0, rest_1.get)(`${this.sdk.apiBaseUrl}/v1/admin/auth/user/get`, this.sdk.secretApiKey, { issuer, wallet_type: walletType });
            return {
                issuer: (_a = data.issuer) !== null && _a !== void 0 ? _a : null,
                publicAddress: (_b = data.public_address) !== null && _b !== void 0 ? _b : null,
                email: (_c = data.email) !== null && _c !== void 0 ? _c : null,
                oauthProvider: (_d = data.oauth_provider) !== null && _d !== void 0 ? _d : null,
                phoneNumber: (_e = data.phone_number) !== null && _e !== void 0 ? _e : null,
                username: (_f = data.username) !== null && _f !== void 0 ? _f : null,
                wallets: (_g = data.wallets) !== null && _g !== void 0 ? _g : null,
            };
        });
    }
}
exports.UsersModule = UsersModule;
//# sourceMappingURL=index.js.map