"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.get = exports.post = void 0;
const fetch_1 = require("./fetch");
const sdk_exceptions_1 = require("../core/sdk-exceptions");
/**
 * Performs a `fetch` to the given URL with the configured `init` object.
 */
function emitRequest(url, init) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a;
        const json = yield (0, fetch_1.fetch)(url, init)
            .then((res) => res.json())
            .catch((err) => {
            throw (0, sdk_exceptions_1.createServiceError)(err);
        });
        if (json.status !== 'ok') {
            throw (0, sdk_exceptions_1.createServiceError)(json);
        }
        return (_a = json.data) !== null && _a !== void 0 ? _a : {};
    });
}
/**
 * Generates an encoded URL with query string from a dictionary of values.
 */
function generateQuery(url, params) {
    let query = '?';
    if (params) {
        for (const [key, value] of Object.entries(params))
            query += `${key}=${value}&`;
        query = query.slice(0, -1); // Remove trailing "&"
    }
    return params ? `${url}${query}` : url;
}
/**
 * POSTs to Magic's API.
 */
function post(url, secretApiKey, body) {
    return emitRequest(url, {
        method: 'POST',
        headers: { 'X-Magic-Secret-key': secretApiKey },
        body: JSON.stringify(body),
    });
}
exports.post = post;
/**
 * GETs from Magic's API.
 */
function get(url, secretApiKey, params) {
    const urlWithParams = generateQuery(url, params);
    return emitRequest(urlWithParams, {
        method: 'GET',
        headers: { 'X-Magic-Secret-key': secretApiKey },
    });
}
exports.get = get;
//# sourceMappingURL=rest.js.map